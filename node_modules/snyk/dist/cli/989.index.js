"use strict";
exports.id = 989;
exports.ids = [989];
exports.modules = {

/***/ 60959:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.vulnerableHashes = void 0;
exports.vulnerableHashes = [
    'fBTyHDn2nUU0jgEu5XBJ5A',
    'xmC9OBzdfLaIBvKVSKbc7g',
    'NUt//j2o6sDxLqSTFfyPmQ',
    'xmC9OBzdfLaIBvKVSKbc7g',
    'oTC+5gi+FbG1R4jpKTfbTg',
    'xmC9OBzdfLaIBvKVSKbc7g',
    'uOUpCKY40NVjHQc2a9Xr8A',
    'xmC9OBzdfLaIBvKVSKbc7g',
    '4Vvmz4X2WmipllB5/ous7Q',
    'vWVkVsfR4RQjHvDG6pfOUg',
    '4DIQPHWEb/z7bholX3/oTg',
    'xmC9OBzdfLaIBvKVSKbc7g',
    'H7sEuRs4sj0D45EAltPQ1w',
    'BP3XAYCdF0ZcF8fmA7GyAg',
    'U//86tIjlVCgQQZXTQudVA',
    'gw4e9TvocE+JqXdQ/8sxZg',
    'BP3XAYCdF0ZcF8fmA7GyAg',
    'U//86tIjlVCgQQZXTQudVA',
    'gw4e9TvocE+JqXdQ/8sxZg',
    'BP3XAYCdF0ZcF8fmA7GyAg',
    'U//86tIjlVCgQQZXTQudVA',
    'gw4e9TvocE+JqXdQ/8sxZg',
    'BP3XAYCdF0ZcF8fmA7GyAg',
    'U//86tIjlVCgQQZXTQudVA',
    'krWKtKP0VH0HJkOaXl8tqw',
    'WCRxHWxoFi61NcxNv3SF0w',
    'yMKfrOVkLDiRsU9R9XbOKw',
    'krWKtKP0VH0HJkOaXl8tqw',
    'WCRxHWxoFi61NcxNv3SF0w',
    'yMKfrOVkLDiRsU9R9XbOKw',
    '378Ytn/c/2G236FMYcwXgQ',
    'IfBVtiwVRT8NeXCp2ZTKtw',
    '8e87HEC9TS3elmUxSejDMQ',
    'y6QMMJo6qLeAwNYvTLrPdw',
    'IfBVtiwVRT8NeXCp2ZTKtw',
    '8e87HEC9TS3elmUxSejDMQ',
    'y6QMMJo6qLeAwNYvTLrPdw',
    'IfBVtiwVRT8NeXCp2ZTKtw',
    '8e87HEC9TS3elmUxSejDMQ',
    'y6QMMJo6qLeAwNYvTLrPdw',
    'IfBVtiwVRT8NeXCp2ZTKtw',
    '8e87HEC9TS3elmUxSejDMQ',
    'lJ9a5c4V2OLQiuoPftBxkg',
    '8dYwxIkoCWpITkuVzLFioA',
    'bnTGE5aRFbMPtWoJ7dB2rw',
    'apRhBWBUAlHxAZqSOZMx+g',
    '8dYwxIkoCWpITkuVzLFioA',
    'bnTGE5aRFbMPtWoJ7dB2rw',
    'EVldHOg3IcMdjSjEWkRajA',
    'axX0LDM6w5q6z+7rGIUqRA',
    'xmC9OBzdfLaIBvKVSKbc7g',
    'EVldHOg3IcMdjSjEWkRajA',
    'axX0LDM6w5q6z+7rGIUqRA',
    'xmC9OBzdfLaIBvKVSKbc7g',
    'EVldHOg3IcMdjSjEWkRajA',
    'axX0LDM6w5q6z+7rGIUqRA',
    'xmC9OBzdfLaIBvKVSKbc7g',
    'pqMfiTE8K6QL1Ap2zCptrg',
    'iyJgsczmQUT2MQh2+UsWOA',
    'TRIdDjt+4nGJdKn689895A',
    'pqMfiTE8K6QL1Ap2zCptrg',
    'iyJgsczmQUT2MQh2+UsWOA',
    'TRIdDjt+4nGJdKn689895A',
    'pqMfiTE8K6QL1Ap2zCptrg',
    'iyJgsczmQUT2MQh2+UsWOA',
    'TRIdDjt+4nGJdKn689895A',
    'CfmJLv6mhLVOjRvflS+vZA',
    'O9n0G4nOT+jMv3PkMZWlzg',
    'G1tHtzggRx3R9OPli2N0Tg',
    'CfmJLv6mhLVOjRvflS+vZA',
    'O9n0G4nOT+jMv3PkMZWlzg',
    'G1tHtzggRx3R9OPli2N0Tg',
    'CfmJLv6mhLVOjRvflS+vZA',
    'O9n0G4nOT+jMv3PkMZWlzg',
    'G1tHtzggRx3R9OPli2N0Tg',
    't87654Z07FBVp4PlKbBJuw',
    'QVwT58hQX7BW1UDqwpty+g',
    '44Xe+Vv3qrNNcyy3/tgHUw',
    'HzzHitFLamLd6qGdA4XliA',
    'QVwT58hQX7BW1UDqwpty+g',
    'PHOrfl3/GKl2tZspVXbzVQ',
    'Vok11jPt8NBpgaOhKOBmcA',
    'oZNwOQSj8Y+zyQqHfrXIpw',
    'cgy4bLqsMMH9qQTGVealZg',
    'HzzHitFLamLd6qGdA4XliA',
    'QVwT58hQX7BW1UDqwpty+g',
    'PHOrfl3/GKl2tZspVXbzVQ',
    'HzzHitFLamLd6qGdA4XliA',
    'BP3XAYCdF0ZcF8fmA7GyAg',
    'PHOrfl3/GKl2tZspVXbzVQ',
    'HzzHitFLamLd6qGdA4XliA',
    'BP3XAYCdF0ZcF8fmA7GyAg',
    'PHOrfl3/GKl2tZspVXbzVQ',
    'jAzz6wRxVKT44W2vWiCTGQ',
    '+/pfM6tLKab91SRz7nuDTQ',
    'FS7LPOCUrFvJ6jnWEi4oFA',
    'zXChiI7N0xHBmQ54SGfOHg',
    'CI3xE60kmrcr8Zt/ALhj1Q',
    '3o0BzBX9DHT+qLu2aOKJ9Q',
    '3JkBHwR+Y9zHQbWraNEW2w',
    'Kr7CzmZeDVKaPyj/+7st0w',
    'siQt4Gd75lFdbO+/SOfl1Q',
    'yL2LXFqqoHo9y/V94BySZg',
    'XFJ4IdEISn7z4D1AFE/1Mg',
    '02XkgiFBT5P+7wk6G/YH7w',
    'txoT/V3yUWlPyhFiQAA7Ig',
    'ATi6HBkdXHVP0OPDphwDBw',
    'CsWz5uabp3ZWg3mOZpowsg',
    'jTMVRLLnsgrRZt68olUNcw',
    'zH1V7WnMX9NANbFcbt95oA',
    'XkvKXtILlKsZu2WDbak/lg',
    'lI3aeHWTNAp68aGOMot7fw',
    'hiwAsuhU+cDx6NhAnSPYmQ',
    'EQqz4+TzeAkh6O5d3jNzrQ',
    '8MQ62soq/HHGzID4UbOIGA',
    '3Q4+C0BAg+xpYYqrtQuKwA',
    'AHnJByMGWZaPD8DkGmq8+Q',
    'SPfzzaUwMKh+jDh9jR5CZQ',
    'RyyOH7qg5hUg4CXCVbXRaA',
    'VSPxRPrvK/ygijyosr7Nag',
    'K2Pg5QY/2sz2aaHiY4Tz/Q',
    'VHuz7S3rhW0OO713wnuWJQ',
    'SlF3oXJ2S9pvRHK5S6F8yw',
    'xtIzvI6c/l2mkAWdJ9n4jw',
    '+rZGJX+UWwsqfOPhw+POXw',
    'lC9Cnqy4AV4Y2PWZls++5g',
    'jAzz6wRxVKT44W2vWiCTGQ',
    '+/pfM6tLKab91SRz7nuDTQ',
    'FS7LPOCUrFvJ6jnWEi4oFA',
    'zXChiI7N0xHBmQ54SGfOHg',
    'CI3xE60kmrcr8Zt/ALhj1Q',
    '3o0BzBX9DHT+qLu2aOKJ9Q',
    '3JkBHwR+Y9zHQbWraNEW2w',
    'Kr7CzmZeDVKaPyj/+7st0w',
    'siQt4Gd75lFdbO+/SOfl1Q',
    'yL2LXFqqoHo9y/V94BySZg',
    'XFJ4IdEISn7z4D1AFE/1Mg',
    '02XkgiFBT5P+7wk6G/YH7w',
    'txoT/V3yUWlPyhFiQAA7Ig',
    'ATi6HBkdXHVP0OPDphwDBw',
    'CsWz5uabp3ZWg3mOZpowsg',
    'jTMVRLLnsgrRZt68olUNcw',
    'zH1V7WnMX9NANbFcbt95oA',
    'XkvKXtILlKsZu2WDbak/lg',
    'lI3aeHWTNAp68aGOMot7fw',
    'hiwAsuhU+cDx6NhAnSPYmQ',
    'EQqz4+TzeAkh6O5d3jNzrQ',
    '8MQ62soq/HHGzID4UbOIGA',
    '3Q4+C0BAg+xpYYqrtQuKwA',
    'AHnJByMGWZaPD8DkGmq8+Q',
    'SPfzzaUwMKh+jDh9jR5CZQ',
    'RyyOH7qg5hUg4CXCVbXRaA',
    'VSPxRPrvK/ygijyosr7Nag',
    'K2Pg5QY/2sz2aaHiY4Tz/Q',
    'VHuz7S3rhW0OO713wnuWJQ',
    'SlF3oXJ2S9pvRHK5S6F8yw',
    'xtIzvI6c/l2mkAWdJ9n4jw',
    '+rZGJX+UWwsqfOPhw+POXw',
    'lC9Cnqy4AV4Y2PWZls++5g',
    'XSU+U/qZPhIv8BIiGqSeww',
    'YntxiBxwzUm5F4IzC78f/w',
    'geBDOuAGAsDk0AQk0hOwqw',
];


/***/ }),

/***/ 86989:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const fs_1 = __webpack_require__(35747);
const crypto = __webpack_require__(76417);
const AdmZip = __webpack_require__(55285);
const ora = __webpack_require__(63395);
const log4shell_hashes_1 = __webpack_require__(60959);
const readFile = fs_1.promises.readFile;
const readDir = fs_1.promises.readdir;
const stat = fs_1.promises.stat;
const MAX_FILE_SIZE = 2 * 1024 * 1024 * 1024 - 1;
const errors = [];
async function startSpinner() {
    const spinner = ora({ isSilent: false, stream: process.stdout });
    spinner.text = `Looking for Log4Shell...`;
    spinner.start();
    return spinner;
}
// eslint-disable-next-line @typescript-eslint/no-unused-vars
async function log4shell(...args) {
    console.log('Please note this command is for already built artifacts. To test source code please use `snyk test`.');
    const signatures = new Array();
    const paths = await find('.');
    const spinner = await startSpinner();
    for (const path of paths) {
        const content = await readFile(path);
        await handleContent(content, path, signatures);
    }
    spinner.stop();
    const results = new Set();
    signatures.forEach((signature) => {
        const path = signature.path.replace(/(.*org\/apache\/logging\/log4j\/core).*/, '$1');
        results.add(path);
    });
    console.log('\nResults:');
    if (results.size != 0) {
        console.log('A vulnerable version of log4j was detected:');
        results.forEach((path) => {
            console.log(`\t ${path}`);
        });
        console.log(`\n We highly recommend fixing this vulnerability. If it cannot be fixed by upgrading, see mitigation information here:
      \t- https://security.snyk.io/vuln/SNYK-JAVA-ORGAPACHELOGGINGLOG4J-2314720
      \t- https://snyk.io/blog/log4shell-remediation-cheat-sheet/`);
        exitWithError();
    }
    console.log('No known vulnerable version of log4j was detected');
}
exports.default = log4shell;
async function handleContent(content, path, accumulator) {
    if (isJvmFile(path) || isJavaArchive(path)) {
        const hash = await computeDigest(content);
        if (log4shell_hashes_1.vulnerableHashes.includes(hash)) {
            accumulator.push({
                hash,
                path,
            });
            return;
        }
    }
    if (!isJavaArchive(path)) {
        return;
    }
    try {
        const zip = new AdmZip(content);
        const entries = zip.getEntries();
        for (const entry of entries) {
            if (entry.isDirectory) {
                continue;
            }
            await handleContent(entry.getData(), path + '/' + entry.entryName, accumulator);
        }
    }
    catch (error) {
        errors.push(error);
    }
}
async function computeDigest(content) {
    const hash = crypto.createHash('md5').update(content);
    return hash.digest('base64').replace(/=/g, '');
}
async function find(path) {
    const result = [];
    await traverse(path, (filePath, stats) => {
        if (!stats.isFile() || stats.size > MAX_FILE_SIZE) {
            return;
        }
        result.push(filePath);
    });
    return result;
}
async function traverse(path, handle) {
    try {
        const stats = await stat(path);
        if (!stats.isDirectory()) {
            handle(path, stats);
            return;
        }
        const entries = await readDir(path);
        for (const entry of entries) {
            const absolute = path + '/' + entry;
            await traverse(absolute, handle);
        }
    }
    catch (error) {
        errors.push(error);
    }
}
function isJavaArchive(path) {
    return path.endsWith('.jar') || path.endsWith('.war');
}
function isJvmFile(path) {
    return path.endsWith('.java') || path.endsWith('.class');
}
function exitWithError() {
    const err = new Error();
    err.code = 'VULNS';
    throw err;
}


/***/ })

};
;
//# sourceMappingURL=989.index.js.map